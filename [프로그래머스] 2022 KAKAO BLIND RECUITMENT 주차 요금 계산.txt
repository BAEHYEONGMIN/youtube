def convert_to_min(s):
    return int(s[:2])*60 + int(s[3:]) 

def cal_fee(n, fees):
    if n< fees[0]: return fees[1]
    else:# 단위 시간으로 나눠 떨어지지 않으면 올림을 하라는 조건이 있다.
        return fees[1] + ((((n - fees[0]) / fees[2]) if (n-fees[0])%fees[2]==0 else ((n-fees[0])//fees[2] + 1) )* fees[3]) 
    # 3항 연산자. (참일때 결과) if (조건문) else(거짓일때 결과)
    # 단위시간으로 안나눠 떨어지면 몫에 1을 더해서 올림의 효과를 줬다.

def solution(fees, records):
    answer = []
    new_record = []
    for i in records:# records를 띄어쓰기 단위로 분해
        new_record.append(i.split(" "))
    car_list = [] #입차한 차 번호 입력할 리스트
    car_IN = {} #입차한 차들의 주차 시간을 저장할 리스트. 차량 번호로 접근하려고 set을 써봤음.
    for i in new_record:
        if i[1] not in car_IN:
            car_list.append(i[1])
            car_IN[i[1]] = -convert_to_min(i[0])
        elif (i[1] in car_IN) and i[2] == "IN": # 이미 입차한 기록이 있는데 또 입차한 경우 
            car_IN[i[1]] -= convert_to_min(i[0])
        else:
            car_IN[i[1]] += convert_to_min(i[0]) # 위의 두 경우 모두 아니면 OUT밖에 없다.
    car_list.sort() # 차 번호 작은 순으로 정렬
    for i in car_list:
        if car_IN[i]<1:# 마지막 출차 기록이 없이 끝난 차량들은 현재 값이 음수이다. 조건에 따라 23:59분에 출차한것으로 간주.
            car_IN[i] += (23*60+59)
        answer.append(cal_fee(car_IN[i],fees))
    
    return answer